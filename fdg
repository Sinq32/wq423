local finity = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/UI-Librarys/main/Finity%20UI%20Lib"))()
local finityWindow = finity.new(true) -- 'true' means dark mode is enabled
finityWindow.ChangeToggleKey(Enum.KeyCode.L)
local gameplayCategory = finityWindow:Category("Main") 
local aimbotSector = gameplayCategory:Sector("Aimbot") 
local shotSector = gameplayCategory:Sector("Glitchy") 
local passSector = gameplayCategory:Sector("Section 1") 
local moveSector = gameplayCategory:Sector("Sections 2")
local UserInputService = game:GetService("UserInputService")


NetworkClient = game:GetService("NetworkClient")
NetworkClient:SetOutgoingKBPSLimit(50000)

local pick = game.Players.LocalPlayer.Backpack.Actions.Pick
local pushback = game.Players.LocalPlayer.Backpack.Actions.Pushback
local power = game:GetService("Players").LocalPlayer.Info.Profile.ShotPower
local boxout = game.Players.LocalPlayer.Backpack.Actions.BoxOut
local stats = game:GetService("Players").LocalPlayer.Info.Stats
local vim = game:service("VirtualInputManager")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootpart = workspace[player.Name].HumanoidRootPart

function releaseKey(keyCode)
    vim:SendKeyEvent(false, keyCode, false, game)
end

function pressKey(keyCode)
    vim:SendKeyEvent(true, keyCode, false, game)
end

-- Function to change body velocity
local function changeBodyVelocity()
    local rootpart = workspace[player.Name].HumanoidRootPart
    local bodyVelocity = rootpart:FindFirstChildOfClass("BodyVelocity")

    -- Wait for BodyVelocity to exist
    while not bodyVelocity do
        wait()
        bodyVelocity = rootpart:FindFirstChildOfClass("BodyVelocity")
    end

    if bodyVelocity.Name == "BodyVelocity" then
        bodyVelocity.Velocity = bodyVelocity.Velocity * 1.25
        bodyVelocity.MaxForce = bodyVelocity.MaxForce * 1000
    end
    if bodyVelocity.Name == "ReboundForce" then
        bodyVelocity.Velocity = bodyVelocity.Velocity * 1.5
        bodyVelocity.MaxForce = bodyVelocity.MaxForce * 1000
    end
end

function getNearestBall()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local nearestBall = nil
    local nearestDistance = math.huge
    for _, balls in pairs(game.Workspace.Balls:GetChildren()) do
        local distance = (balls.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
        if distance < nearestDistance then
            return nearestBall, nearestDistance
        end
    end
end

function walkToNearestBall()
    getNearestBall()
    
    if nearestBall then
        local humanoid = localPlayer.Character.Humanoid
        humanoid:MoveTo(nearestBall.Position)
    end
end

function playEmote(animationId, speed, time)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    AnimationId = tostring(animationId)
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://"..AnimationId
    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
    wait(time)
    k:Stop()
end

function getAnimation()
    local animator = game.Players.LocalPlayer.Character.Humanoid.Animator
    local activeAnimations = animator:GetPlayingAnimationTracks()
    for _, animTrack in ipairs(activeAnimations) do
        print(animTrack.Animation.AnimationId)
        if animTrack.Animation.AnimationId == AnimationId then
            isAnimationPlaying = true
            game.Players.LocalPlayer.Backpack.Actions.Rebounding.Value = true
            return isAnimationPlaying
        end
    end
end

-- Function to play an animation
local function PlayAnimation(animationId)
    -- Check if the animation exists
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. tostring(animationId)
    local loadedAnimation = character.Humanoid:LoadAnimation(animation)

    if loadedAnimation then
        -- Play the animation
        loadedAnimation:Play()
    else
        print("Failed to load animation:", animationId)
    end
end

-- Function to stop all animations
local function StopAllAnimations()
    -- Get all players in the game
    local players = game:GetService("Players"):GetPlayers()

    -- Iterate through each player's character
    for _, player in ipairs(players) do
        local character = player.Character
        if character then
            if humanoid then
                -- Stop all animations
                local animator = humanoid:FindFirstChildOfClass("Animator")
                if animator then
                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                        track:Stop()
                    end
                end
            end
        end
    end
end


_G.aimbotValue = 26.6
_G.aimKey = "B"

aimbotSector:Cheat("Checkbox", "Aimbot", function(State)
    _G.aimbotBool = State
    while _G.aimbotBool do
        local power = game:GetService("Players").LocalPlayer.Info.Profile.ShotPower
        if UserInputService:IsKeyDown(_G.aimKey) then
            pressKey(Enum.KeyCode.E)
        end
        if power.Value >= _G.aimbotValue then
            game:GetService("Players").LocalPlayer.Info.Profile.ShotPower.ForceRelease.Value = true
            wait(0.15)
            game:GetService("Players").LocalPlayer.Info.Profile.ShotPower.ForceRelease.Value = false
        end
        if _G.aimbotBool == false then
            break
        end
        wait(0.01)
    end
end)

aimbotSector:Cheat("Slider", "Aimbot Slider", function(Value)
	print("Aimbot value changed:", Value)
    _G.aimbotValue = Value
end, {min = 16, max = 38, suffix = " studs"})

_G.forceZeroKey = "One"

shotSector:Cheat("Checkbox", "Force 0", function(State)
	_G.forceZeroBool = State
    while _G.forceZeroBool do
        if UserInputService:IsKeyDown(_G.forceZeroKey) then
            local args = {
                [1] = "shotType",   
                [2] = {
                    ["Ac"] = {
                        ["Dunk"] = false,
                        ["Posting"] = false,
                        ["ShootingEnabled"] = true,
                        ["NoMov"] = false,
                        ["PickupBall"] = false,
                        ["Shooting"] = false,
                        ["Blocking"] = false,
                        ["catchPass"] = false,
                        ["Dead"] = false,
                        ["DribbleAnim"] = true,
                        ["Falling"] = false,
                        ["Lateral"] = false,
                        ["Handles"] = false,
                        ["Pivot"] = false,
                        ["walkOnCourt"] = false,
                        ["HideChars"] = false,
                        ["Pick"] = false,
                        ["Running"] = true,
                        ["PumpFake"] = false,
                        ["ShotBall"] = false,
                        ["Dropball"] = false,
                        ["brokenAnkles"] = false,
                        ["Steal"] = false,
                        ["Rebound"] = false,
                        ["Guarding"] = false,
                        ["PostMove"] = false,
                        ["hasBall"] = true,
                        ["withBallMovement"] = false,
                        ["hopStep"] = false,
                        ["offDribble"] = false,
                        ["CrossOver"] = false,
                        ["Passing"] = false,
                        ["NoRun"] = false
                    },
                    ["Con"] = "dunk",
                    ["vel"] = 16.79998779296875,
                    ["Co"] = {
                        ["shift"] = false,
                        ["shiftHold"] = true,
                        ["Passing"] = false,
                        ["Alley"] = false
                    }
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Ball"):InvokeServer(unpack(args))
            
            local args = {
                [1] = "shotType",
                [2] = {
                    ["Ac"] = {
                        ["Dunk"] = false,
                        ["Posting"] = false,
                        ["ShootingEnabled"] = true,
                        ["NoMov"] = false,
                        ["PickupBall"] = false,
                        ["Shooting"] = true,
                        ["Blocking"] = false,
                        ["catchPass"] = false,
                        ["Dead"] = false,
                        ["DribbleAnim"] = false,
                        ["Falling"] = false,
                        ["Lateral"] = false,
                        ["Handles"] = false,
                        ["Pivot"] = false,
                        ["walkOnCourt"] = false,
                        ["HideChars"] = false,
                        ["Pick"] = false,
                        ["Running"] = false,
                        ["PumpFake"] = false,
                        ["ShotBall"] = false,
                        ["Dropball"] = false,
                        ["brokenAnkles"] = false,
                        ["Steal"] = false,
                        ["Rebound"] = false,
                        ["Guarding"] = false,
                        ["PostMove"] = false,
                        ["hasBall"] = true,
                        ["withBallMovement"] = false,
                        ["hopStep"] = false,
                        ["offDribble"] = false,
                        ["CrossOver"] = false,
                        ["Passing"] = false,
                        ["NoRun"] = false
                    },
                    ["Con"] = "reg",
                    ["Co"] = {
                        ["shift"] = false,
                        ["shiftHold"] = true,
                        ["Passing"] = false,
                        ["Alley"] = false
                    },
                    ["vel"] = 16.799989700317383,
                    ["pv"] = Vector3.new(1.0231953859329224, 0, 16.768802642822266)
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Ball"):InvokeServer(unpack(args))
            
            local args = {
                [1] = "addPower",
                [2] = {
                    ["Con"] = "dunk"
                }
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
            
            local args = {
                [1] = "addPower",
                [2] = {}
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
            
            local args = {
                [1] = "stop"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Ball"):InvokeServer(unpack(args))
            
            local args = {
                [1] = "Pump"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
            
            local args = {
                [1] = "release"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Ball"):InvokeServer(unpack(args))            
        end
        if _G.forceZeroBool == false then
            break
        end
        wait(0.01)
    end
end)

shotSector:Cheat("Textbox", "Force 0", function(Value)
    _G.forceZeroKey = Value
	print("Textbox value changed:", Value)
end, {
	placeholder = "One"
})

moveSector:Cheat("Checkbox", "Travel", function(State)
	_G.travelBool = State
    if _G.travelBool == false then
        game.Players.LocalPlayer.Backpack.Actions.Rebounding.Value = false
    end
    while _G.travelBool do
        game.Players.LocalPlayer.Backpack.Actions.Rebounding.Value = true
        if _G.travelBool == false then
            game.Players.LocalPlayer.Backpack.Actions.Rebounding.Value = false
            break
        end
        wait(0.01)
    end
end)

function setRotation(x,y,z)
    local Client = game:GetService("Players").LocalPlayer
    Client.Character.HumanoidRootPart.CFrame = Client.Character.HumanoidRootPart.CFrame * CFrame.Angles(math.rad(x), math.rad(y), math.rad(z))
end

local function flipCoin()
    return math.random() < 0.5
end


passSector:Cheat("Checkbox", "Ur a Nigger", function(State)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local originalLeftHand = character.LeftHand
    local originalRightHand = character.RightHand
    local clonedLeftHand = originalLeftHand:Clone()
    local clonedRightHand = originalRightHand:Clone()
	_G.unknownBool = State
    if _G.unknownBool then
        -- Check if the hands exist in the character
        if originalLeftHand and originalRightHand then
            -- Make the original hands invisible
            originalLeftHand.Transparency = 1
            originalRightHand.Transparency = 1
            originalLeftHand.Massless = true
            originalRightHand.Massless = true

            -- Parent the cloned hands to the character's workspace
            clonedLeftHand.Parent = character
            clonedRightHand.Parent = character
            print("Changed")
        else
            print("Not found in character.")
        end
    else
        clonedLeftHand:Destroy()
        clonedRightHand:Destroy()
    end
    while _G.unknownBool do
        if game.Players.LocalPlayer.Backpack.Actions.Blocking.Value then
            originalRightHand.Size = Vector3.new(9,9,9)
            originalLeftHand.Size = Vector3.new(9,9,9)
        else
            originalRightHand.Size = Vector3.new(0.7703777551651001, 1.425475001335144, 0.8270343542098999)
            originalLeftHand.Size = Vector3.new(0.7703777551651001, 1.425475001335144, 0.8270343542098999)
        end
        if _G.unknownBool == false then
            originalLeftHand.Transparency = 0
            originalRightHand.Transparency = 0
            clonedLeftHand:Destroy()
            clonedRightHand:Destroy()
            break
        end
        wait(0.01)
    end
end)

local blockingAnim = false

passSector:Cheat("Checkbox", "Auto Block", function(State)
	_G.bumpBool = State
    while _G.bumpBool do
        if UserInputService:IsKeyDown("C") then
            local players = game:GetService("Players")
            local localPlayer = players.LocalPlayer
            local localCharacter = localPlayer.Character
            if localCharacter and localCharacter:FindFirstChild("Head") then
                local nearestBall = nil
                local nearestBall2 = nil
                local nearestDistance = math.huge
                for _, balls in pairs(game.Workspace.Balls:GetChildren()) do
                    local distance = (balls.Position - localCharacter.Head.Position).Magnitude
                    if distance < nearestDistance then
                        nearestBall = balls
                        nearestBall2 = balls
                        nearestDistance = distance
                    end
                end
                local ballOwner = nearestBall.Owner.Value

                local humanoid = localCharacter.Humanoid
                print(nearestBall, nearestDistance)
                if nearestDistance < 99 then
                    if nearestBall:FindFirstChild("Blockable") then
                        if nearestBall.Alley.Value == true then
                            blockingAnim = false
                            wait(0.25)
                            for _, balls in pairs(game.Workspace.Balls:GetChildren()) do
                                local distance = (balls.Position - localCharacter.Head.Position).Magnitude
                                if distance < nearestDistance then
                                    nearestBall = balls
                                    nearestBall2 = balls
                                    nearestDistance = distance
                                end
                            end
                            local args = {
                                [1] = "guard",
                                [2] = true
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            pressKey(Enum.KeyCode.LeftShift)
                            humanoid:MoveTo(nearestBall.Position)
                            wait(0.05)
                            local args = {
                                [1] = "block"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            pressKey(Enum.KeyCode.Space)
                            humanoid:MoveTo(nearestBall.Position)
                            print("rahhhh")
                            pressKey(Enum.KeyCode.Space)

                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            pressKey(Enum.KeyCode.Space)
                            
                            wait(0.05)
                            pressKey(Enum.KeyCode.Space)
                            local animator = game.Players.LocalPlayer.Character.Humanoid.Animator
                            local activeAnimations = animator:GetPlayingAnimationTracks()
                            for _, animTrack in ipairs(activeAnimations) do
                                print(animTrack.Animation.AnimationId)
                                if animTrack.Animation.AnimationId == "rbxassetid://5487819984" or animTrack.Animation.AnimationId == "rbxassetid://5611032959" or animTrack.Animation.AnimationId == "rbxassetid://5487764686" then
                                    blockingAnim = true
                                    print("AFSDFSDFSDF")
                                end
                            end
                            print(blockingAnim)
                            if blockingAnim == false then
                                print("HAHAHAAHAHAHAHAAHAHAHAHAA")
                                PlayAnimation(5487764686)
                                print(blockingAnim)
                            end

                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            wait(0.05)
                            wait(0.05)
                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            wait(0.1)
                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            wait(0.1)
                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            wait(0.1)
                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            wait(0.1)
                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            wait(0.1)
                            local args = {
                                [1] = "block"
                            }
        
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            local args = {
                                [1] = "guard",
                                [2] = false
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                        end
                        local blockableValue = nearestBall.Blockable.Value
                        if blockableValue ~= nil and blockableValue == true and nearestBall.inAction.Value == true and nearestBall.Pass.Value == false then
                            for _, balls in pairs(game.Workspace.Balls:GetChildren()) do
                                local distance = (balls.Position - localCharacter.Head.Position).Magnitude
                                if distance < nearestDistance then
                                    nearestBall = balls
                                end
                            end
                            blockingAnim = false
                            local args = {
                                [1] = "guard",
                                [2] = true
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            pressKey(Enum.KeyCode.LeftShift)
                            wait(0.1)
                            humanoid:MoveTo(nearestBall.Position)
                            wait(0.1)
                            if nearestBall:FindFirstChild("Blockable") and nearestBall.Blockable.Value == true then
                                local args = {
                                    [1] = "block"
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                local args = {
                                    [1] = "guard",
                                    [2] = true
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                pressKey(Enum.KeyCode.Space)
                                humanoid:MoveTo(nearestBall.Position)
                                print("rahhhh")
                                pressKey(Enum.KeyCode.Space)

                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                pressKey(Enum.KeyCode.Space)
                                
                                wait(0.05)
                                pressKey(Enum.KeyCode.Space)
                                local animator = game.Players.LocalPlayer.Character.Humanoid.Animator
                                local activeAnimations = animator:GetPlayingAnimationTracks()
                                for _, animTrack in ipairs(activeAnimations) do
                                    print(animTrack.Animation.AnimationId)
                                    if animTrack.Animation.AnimationId == "rbxassetid://5487819984" or animTrack.Animation.AnimationId == "rbxassetid://5611032959" or animTrack.Animation.AnimationId == "rbxassetid://5487764686" then
                                        blockingAnim = true
                                        print("AFSDFSDFSDF")
                                    end
                                end
                                print(blockingAnim)
                                if blockingAnim == false then
                                    print("HAHAHAAHAHAHAHAAHAHAHAHAA")
                                    PlayAnimation(5487764686)
                                    print(blockingAnim)
                                end

                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                wait(0.05)
                                wait(0.05)
                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                wait(0.1)
                                local args = {
                                    [1] = "guard",
                                    [2] = true
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                wait(0.1)
                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                wait(0.1)
                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                wait(0.1)
                                local args = {
                                    [1] = "guard",
                                    [2] = true
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                wait(0.1)
                                local args = {
                                    [1] = "block"
                                }
            
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                                local args = {
                                    [1] = "guard",
                                    [2] = false
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Player"):WaitForChild("Actions"):FireServer(unpack(args))
                            end
                        end
                    end
                end
            end
        end
        if _G.bumpBool == false then
            break
        end
        wait(0.01)
    end
end)

passSector:Cheat("Slider", "Silent Speed Slider", function(Value)
	print("Speed changed:", Value)
    stats.Speed.Value = Value
    stats.SpeedBall.Value = Value
    stats.DefensiveSpeed.Value = Value
    stats.Contest.Value = Value
end, {min = stats.Speed.Value, max = 99, suffix = " studs"})
